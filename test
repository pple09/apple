from ursina import *
from ursina.prefabs.first_person_controller import FirstPersonController








app = Ursina()
#EditorCamera()


class Player(FirstPersonController):   
    def __init__(self):
         super().__init__(
              
              speed = 10,
              model = 'cude',
              Collider = 'mesh',
              position = (-10,0,-10),
              scale = 1
              
         )

class Warp(Entity):
    def __init__(self,i, j):
        super().__init__(
            warp = Entity(
                model = 'cube',
                scale = (5, 5, 5),
                position = (i * 5, 1, j * 5),
                collider = 'box'


            )


        )

def input(Key):
     if Key == 'escape':
        app.quit()




        self.a = player

        def update(self):
            self.abcd()


        def abcd(self):
            if self.warp.intersects(a):
                self.a.position = (95, 3, 90)






player = Player()






class Exit(Entity):
     def __init__(self,i,j):
          super().__init__(
               model = 'cube',
               scale = (5,5,5),
               color = color.black90,
               position = (i*5 ,0 ,j*5)

          )
          self.player = player
          self.text = Text(
              text = 'yee',
              scale = 2,
              origin = (0,0),
              visible = False
          )
     def update(self):
        self.clear()
     def clear(self):
     
        dis = (self.player.position - self.position).length()
        print(dis)
        if dis < 3:
            self.player.enabled = False
            self.text.visible = True







car = Entity(
     model = 'model/car.blend',
     Texture = 'image/car.jpg',
     scale = 5,
     rotation = (0, 0, 0),
     Collider = 'mesh'
)
__= False




MAP = [
    [11, 12,'e', 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,],
    [11, 12, __, __, __, 16, __, __, 19, __, __, __, 23, 24, 25, 26, 27,],
    [11, 12, 13, 14, __, 16, __, __, __, __, 21, 22, __, 24, 25, 26, 27,],
    [11, 12, __, __, __, 16, __, 18, 19, __, 21, __, __, __, __, 26, 27,],
    [11, 12, __, 14, 15, 16, __, 18, 19, __, __, __, 23, 24, 25, 26, 27,],
    [11, 12, __, 14, __, __, __, 18, 19, 20, 21, __, __, __, 25, 26, 27,],
    [11, 12, __, __, __, 16, 17, 18, 19, 20, 21, 22, 23, __, 25, 26, 27,],
    [11, 12, 13, 14, 15, 16, 17, __, __, __, __, 22, 23, __, 25, 26, 27,],
    [11, 12, __, __, __, __, __, __, 19, 20, __, __, __, __, 25, 26, 27,],
    [11, 12, 13, __, 15, 16, 17, __, 19, 20, 21, 22, __, 24, 25, 26, 27,],
    [11, 12, 13, 14, 15, 16, __, __, 19, __, 21, __, __, __, __, __, 27,],
    [11, 12, 13, __, __, __, __, __, 19, __, 21, __, 23, 24, 25, __, 27,],
    [11, 12, __, __, 15, 16, 17, __, 19, __, __, 22, 23, 24, 25, __, 27,],
    [11, __, __, 14, 15, 16, 17, __, __, 20, __, __, 23, __, __, __, 27,],
    [11, __, __, 14, 15, 16, 17, 18, __, 20, 21, __, __, __, 25, __, 27,],
    [11, __, __, __, __, 16, 17, 18, __, 20, 21, 22, 23, 24, 25, __, 27,],
    [11, 12, __, 14, __, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, __, 27,],
    [11, 12, __, 14, __, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,],
    [11, 12, __, 14, __, __, __, __, 19, 20, 21, 22, 23, 24, 25, 26, 27,],
    [11, 12, __, 14, 15, 16, 17, __, __, __, __, __, __, 24, 25, 26, 27,],
    [11, 12, __, __, __, __, __, __, 19, 20, 21, 22, __, 24, 25, 26, 27,],
    [11, 12, __, 14, 15, 16, 17, 18, __, __, __, 22, __, 24, 25, 26, 27,],
    [11, __, __, 14, 15, 16, 17, 18, 19, 20, __, 22, __, 24, 25, 26, 27,],
    [11, 12, __, __, 15, 16, 17, 18, 19, 20, __, 22, __, 24, 25, 26, 27,],
    [11, __, __, 14, __, __, __, __, __, 20, __, __, __, 24, 25, 26, 27,],
    [11, 12, 13, 14, __, 16, 17, 18, 19, 20, 21, 22, __, 24, 25, 26, 27,],
    [11, 12, __, 14, __, 16, 17, 18, 19, 20, 21, 22, __, 24, 25, 26, 27,],
    [11, 12, __, 14, __, 16, 17, 18, __, __, __, __, __, 24, 25, 26, 27,],
    [11, 12, __, 14, __, 16, 17, 18, __, 20, 21, 22, __, 24, 25, 26, 27,],
    [11, 12, __, 14, __, __, __, __, __, 20, 21, 22, __, 24, 25, 26, 27,],
    [11, 12, __, 14, 15, 16, 17, 18, 19, 20, 21, 22, __, 24, 25, 26, 27,],
    [11, __, __, __, __, __, __, 18, __, __, __, 22, __, 24, 25, __, 27,],
    [11, __, 13, 14, 15, 16, 17, 18, __, 20, 21, 22, __, 24, __, __, 27,],
    [11, __, 13, 14, 15, 16, 17, 18, __, 20, 21, 22, __, 24, __, 26, 27,],
    [11, __, 13, __, __, __, __, __, __, 20, 21, 22, __, 24, __, __, 27,],
    [11, __, 13, __, 15, 16, 17, 18, __, 20, 21, 22, __, 24, 25, __, 27,],
    [11, __, 13, __, 15, 16, __, 18, __, __, __, 22, __, 24, 25, __, 27,],
    [11, __, __, __, 15, 16, __, 18, 19, 20, 21, 22, __, 24, 25, __, 27,],
    [11, __, 13, __, 15, 16, __, 18, 19, 20, 21, 22, __, 24, 25, __, 27,],
    [11, __, 13, __, 15, 16, __, 18, 19, 20, 21, 22, __, __, __, __, 27,],
    [11, __, 13, __, __, __, __, __, __, __, __, __, __, 24, 25, 26, 27,],
    [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, __, 24, 25, 26, 27,],
    [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 'p', 24, 25, 26, 27,],



















]

for i in range( len(MAP) ):
    for j in range( len( MAP[i] ) ):
            if MAP[i][j]:
                if MAP[i][j] == "p":
                     player.position = (i * 5, 0, j * 5)
                     continue
                
                if MAP[i][j] == 'e':
                    exitdoor = Exit(i,j)
                    continue


                if MAP[i][j] == 'w':
                    warp = Warp(i, j)
                    continue





                Wall = Entity(
                    model = 'cube',
                    #color = color.black,
                    scale = (5, 10, 5),
                    position = (i * 5, 0, j * 5),
                    collider = 'box',
                    texture = r'medieval_red_brick_4k.blend\textures\medieval_red_brick_diff_4k.jpg'
            

            )
            
                 







ground = Entity(
    model = 'plane',
    color = color.blue,
    position = (0, 0, 0),
    scale = (1000, 1, 1000),
    collider = 'mesh',
    texture = r'rocky_trail_02_4k.blend\textures\rocky_trail_02_diff_4k.jpg'
)

app.run()
